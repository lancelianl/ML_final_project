{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "from collections import defaultdict\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "interaction_matrix = pd.read_csv(\"/Users/xianghuang/Desktop/ml/final_dataset/interaction_matrix.csv\", index_col=0)\n",
    "anime_data = pd.read_csv(\"/Users/xianghuang/Desktop/ml/final_dataset/anime.csv\")\n",
    "\n",
    "anime_data[\"MAL_ID\"] = anime_data[\"MAL_ID\"].astype(str)\n",
    "interaction_matrix.columns = interaction_matrix.columns.astype(str)\n",
    "\n",
    "column_popularity = (interaction_matrix != 0).sum(axis=0)\n",
    "anime_data[\"popularity\"] = anime_data[\"MAL_ID\"].map(column_popularity).fillna(0).astype(int)\n",
    "\n",
    "\n",
    "# Baseline Model\n",
    "# Popularity-Based Recommendation\n",
    "def popularity_based_recommender(n=10):\n",
    "    \"\"\"\n",
    "    Recommend the most popular anime based on the number of ratings.\n",
    "    \"\"\"\n",
    "    popular_anime = anime_data.sort_values(by=\"popularity\", ascending=False)\n",
    "    return popular_anime.head(n)[[\"MAL_ID\", \"Name\", \"popularity\"]]\n",
    "\n",
    "# Genre-Based Recommendation\n",
    "def genre_based_recommender(user_id, n=10):\n",
    "    \"\"\"\n",
    "    Recommend anime from genres the user has rated highly.\n",
    "    \"\"\"\n",
    "    anime_data[\"MAL_ID\"] = anime_data[\"MAL_ID\"].astype(str)\n",
    "    interaction_matrix.index = interaction_matrix.index.astype(str)\n",
    "\n",
    "    user_ratings = interaction_matrix.loc[str(user_id)].dropna()\n",
    "    if user_ratings.empty:\n",
    "        return pd.DataFrame(columns=[\"MAL_ID\", \"Name\", \"Genres\"])\n",
    "\n",
    "    favorite_anime_ids = user_ratings[user_ratings >= user_ratings.mean()].index\n",
    "    anime_data[\"Genres\"] = anime_data[\"Genres\"].apply(lambda x: x.split(\",\") if isinstance(x, str) else [])\n",
    "\n",
    "    favorite_genres = anime_data[anime_data[\"MAL_ID\"].isin(favorite_anime_ids)][\"Genres\"]\n",
    "    favorite_genres = favorite_genres.explode().value_counts().index[:3]  # Top 3 genres\n",
    "\n",
    "    anime_with_genres = anime_data[\n",
    "        anime_data[\"Genres\"].apply(lambda x: any(genre in x for genre in favorite_genres))\n",
    "    ]\n",
    "    return anime_with_genres.sort_values(by=\"popularity\", ascending=False).head(n)[[\"MAL_ID\", \"Name\", \"Genres\"]]\n",
    "\n",
    "\n",
    "# Ensemble Method\n",
    "class EnsembleRecommender:\n",
    "    def __init__(self, anime_data):\n",
    "        self.anime_data = anime_data\n",
    "           \n",
    "    def recommend(self, user_id, collab_predictions, content_predictions, n=10):\n",
    "        \"\"\"\n",
    "        Combines collaborative filtering and content-based filtering predictions.\n",
    "        \"\"\"\n",
    "        ensemble_scores = 0.6 * collab_predictions + 0.4 * content_predictions\n",
    "\n",
    "        self.anime_data[\"ensemble_score\"] = ensemble_scores\n",
    "        top_recommendations = self.anime_data.sort_values(by=\"ensemble_score\", ascending=False).head(n)\n",
    "\n",
    "        return top_recommendations[[\"MAL_ID\", \"Name\", \"ensemble_score\"]]\n",
    "\n",
    "\n",
    "# np.random.seed(42)\n",
    "\n",
    "# Baseline recommendations\n",
    "# print(\"Popularity-Based Recommendations:\")\n",
    "# print(popularity_based_recommender(n=5))\n",
    "\n",
    "# print(\"Genre-Based Recommendations:\")\n",
    "# print(genre_based_recommender(user_id=1, n=5))\n",
    "\n",
    "# Generate reproducible random predictions\n",
    "#collab_predictions = np.random.rand(len(anime_data))\n",
    "#content_predictions = np.random.rand(len(anime_data))\n",
    "\n",
    "# Ensemble recommendations\n",
    "# ensemble_recommender = EnsembleRecommender(anime_data)\n",
    "# print(\"Ensemble Recommendations:\")\n",
    "# print(ensemble_recommender.recommend(user_id=1, collab_predictions=collab_predictions, content_predictions=content_predictions, n=5))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Peter",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
